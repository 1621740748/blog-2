<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gr.blog.mapper.BlogCategoryMapper" >
  <resultMap id="BaseResultMap" type="gr.blog.model.BlogCategory" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="category_name" property="categoryName" jdbcType="VARCHAR" />
    <result column="pid" property="pid" jdbcType="INTEGER" />
    <result column="sort" property="sort" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="ResultWithParent" type="gr.blog.model.BlogCategory" extends="BaseResultMap">
    <association property="parentCategory" javaType="gr.blog.model.BlogCategory">
      <id column="pid" property="id"></id>
      <result column="p_category_name" property="categoryName"></result>
      <result column="p_description" property="description"></result>
    </association>
  </resultMap>

  <sql id="Base_Column_List" >
    id, category_name, pid, sort, description
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultWithParent" parameterType="java.lang.Integer" >
    select
    t1.id, t1.category_name, t1.sort, t1.pid ,t1.description, t2.category_name p_category_name,t2.description p_description
    from blog_category t1 left join blog_category t2 on t1.pid = t2.id
    where t1.id = #{id,jdbcType=INTEGER}
  </select>

  <select id="getAllCategory" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from blog_category
    where pid !=0
  </select>

  <select id="getTopCategorys" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from blog_category
    where pid=0
  </select>

  <!-- 分页查询 -->
  <select id="getCategoryList" resultMap="ResultWithParent" parameterType="java.util.Map">
    select
    t1.id, t1.category_name, t1.sort, t1.pid , t1.description, t2.category_name p_category_name, t2.description p_description
    from blog_category t1 left join blog_category t2 on t1.pid = t2.id
    <if test="sSearch != null and sSearch != ''">
      <where>
        <if test="id != null" >
          t1.id like '%${sSearch}%'
        </if>
        <if test="categoryName != null" >
          or t1.category_name like '%${sSearch}%'
        </if>
        <if test="pid != null" >
          or t1.pid like '%${sSearch}%'
        </if>
        <if test="sort != null" >
          or t1.sort like '%${sSearch}%'
        </if>
        <if test="description != null" >
          or t1.description like '%${sSearch}%'
        </if>
      </where>
    </if>
    <if test="orderColumn != null and orderDir != null">
      order by t1.${orderColumn} ${orderDir}
    </if>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from blog_category
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <delete id="deleteBatch" parameterType="int[]" >
    delete from blog_category
    where id in
    <foreach collection="array" item="ids" index="no" open="("
             separator="," close=")">
      ${ids}
    </foreach>
  </delete>

  <insert id="insert" parameterType="gr.blog.model.BlogCategory" >
    insert into blog_category (id, category_name, pid, 
      sort, description)
    values (#{id,jdbcType=INTEGER}, #{categoryName,jdbcType=VARCHAR}, #{pid,jdbcType=INTEGER}, 
      #{sort,jdbcType=VARCHAR}),#{description,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="gr.blog.model.BlogCategory" >
    insert into blog_category
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="categoryName != null" >
        category_name,
      </if>
      <if test="pid != null" >
        pid,
      </if>
      <if test="sort != null" >
        sort,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="categoryName != null" >
        #{categoryName,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        #{sort,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="gr.blog.model.BlogCategory" >
    update blog_category
    <set >
      <if test="categoryName != null" >
        category_name = #{categoryName,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="sort != null" >
        sort = #{sort,jdbcType=VARCHAR},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="gr.blog.model.BlogCategory" >
    update blog_category
    set category_name = #{categoryName,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER},
    sort = #{sort,jdbcType=VARCHAR}
    description = #{description,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>